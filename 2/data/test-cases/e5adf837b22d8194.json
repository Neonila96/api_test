{"uid":"e5adf837b22d8194","name":"test_pet_operations","fullName":"api_test#test_pet_operations","historyId":"4368cf95f7bf4d292a30487e2de6971b","time":{"start":1724594142749,"stop":1724594142849,"duration":100},"status":"failed","statusMessage":"AssertionError: assert 200 == 404\n +  where 200 = <Response [200]>.status_code","statusTrace":"base_url = 'https://petstore.swagger.io/v2', pet_id = 1\n\n    def test_pet_operations(base_url, pet_id):\n    \n        update_data = {\n            \"id\": pet_id,\n            \"name\": \"Fluffy\",\n            \"category\": {\n                \"id\": 1,\n                \"name\": \"Dogs\"\n            },\n            \"photoUrls\": [\n                \"http://example.com/photos/fluffy\"\n            ],\n            \"tags\": [\n                {\n                    \"id\": 1,\n                    \"name\": \"friendly\"\n                }\n            ],\n            \"status\": \"sold\"\n        }\n        response = requests.put(f'{base_url}/pet', json=update_data)\n        print(\"Update pet response:\", response.text)\n        assert response.status_code == 200\n    \n    \n        response = requests.get(f'{base_url}/pet/{pet_id}')\n        print(\"Get pet response:\", response.text)\n>       assert response.status_code == 404\nE       assert 200 == 404\nE        +  where 200 = <Response [200]>.status_code\n\napi_test.py:72: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"setup","time":{"start":1724594142527,"stop":1724594142748,"duration":221},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pet_id","time":{"start":1724594142527,"stop":1724594142527,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1724594142527,"stop":1724594142527,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 200 == 404\n +  where 200 = <Response [200]>.status_code","statusTrace":"base_url = 'https://petstore.swagger.io/v2', pet_id = 1\n\n    def test_pet_operations(base_url, pet_id):\n    \n        update_data = {\n            \"id\": pet_id,\n            \"name\": \"Fluffy\",\n            \"category\": {\n                \"id\": 1,\n                \"name\": \"Dogs\"\n            },\n            \"photoUrls\": [\n                \"http://example.com/photos/fluffy\"\n            ],\n            \"tags\": [\n                {\n                    \"id\": 1,\n                    \"name\": \"friendly\"\n                }\n            ],\n            \"status\": \"sold\"\n        }\n        response = requests.put(f'{base_url}/pet', json=update_data)\n        print(\"Update pet response:\", response.text)\n        assert response.status_code == 200\n    \n    \n        response = requests.get(f'{base_url}/pet/{pet_id}')\n        print(\"Get pet response:\", response.text)\n>       assert response.status_code == 404\nE       assert 200 == 404\nE        +  where 200 = <Response [200]>.status_code\n\napi_test.py:72: AssertionError","steps":[],"attachments":[{"uid":"958f1ca5e48263d0","name":"stdout","source":"958f1ca5e48263d0.txt","type":"text/plain","size":629}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[{"name":"setup::0","time":{"start":1724594142876,"stop":1724594143086,"duration":210},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"suite","value":"api_test"},{"name":"host","value":"fv-az1432-853"},{"name":"thread","value":"2116-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"api_test"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":2,"unknown":0,"total":3},"items":[{"uid":"460f55d407a3f408","reportUrl":"https://Neonila96.github.io/api_test/1//#testresult/460f55d407a3f408","status":"passed","time":{"start":1724593822911,"stop":1724593823533,"duration":622}},{"uid":"558dd6036d0dea58","reportUrl":"https://Neonila96.github.io/api_test/1//#testresult/558dd6036d0dea58","status":"passed","time":{"start":1724593721968,"stop":1724593722716,"duration":748}}]},"tags":[]},"source":"e5adf837b22d8194.json","parameterValues":[]}